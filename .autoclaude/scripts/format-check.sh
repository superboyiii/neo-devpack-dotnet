#!/bin/bash
# Format Check
# Ensures code is properly formatted
# Auto-generated by AutoClaude

set -euo pipefail

# Initialize arrays
declare -a errors=()
declare -a format_commands=()

# Detect formatters and linters
if [ -f "package.json" ]; then
    # Check for ESLint
    if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f ".eslintrc.yml" ] || [ -f ".eslintrc.yaml" ]; then
        if command -v npx &> /dev/null; then
            format_commands+=("npx eslint . --ext .js,.jsx,.ts,.tsx")
        fi
    fi
    
    # Check for Prettier
    if [ -f ".prettierrc" ] || [ -f ".prettierrc.js" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
        if command -v npx &> /dev/null; then
            format_commands+=("npx prettier --check .")
        fi
    fi
    
    # Check for package.json scripts
    if command -v jq &> /dev/null; then
        for script in "lint" "format:check" "prettier:check" "eslint"; do
            if jq -e ".scripts.\"$script\"" package.json &> /dev/null; then
                format_commands+=("npm run $script")
            fi
        done
    fi
elif [ -f "Cargo.toml" ]; then
    # Rust project
    if command -v cargo &> /dev/null; then
        format_commands+=("cargo fmt -- --check")
        if command -v cargo-clippy &> /dev/null; then
            format_commands+=("cargo clippy -- -D warnings")
        fi
    fi
elif [ -f "go.mod" ]; then
    # Go project
    if command -v gofmt &> /dev/null; then
        format_commands+=("gofmt -l .")
    fi
    if command -v golint &> /dev/null; then
        format_commands+=("golint ./...")
    fi
elif [ -f "pyproject.toml" ] || [ -f "setup.cfg" ] || [ -f ".flake8" ]; then
    # Python project
    if command -v black &> /dev/null; then
        format_commands+=("black --check .")
    fi
    if command -v flake8 &> /dev/null; then
        format_commands+=("flake8 .")
    fi
    if command -v pylint &> /dev/null; then
        format_commands+=("pylint **/*.py")
    fi
fi

# Remove duplicates
format_commands=($(printf "%s\n" "${format_commands[@]}" | sort -u))

# Function to run a format command
run_format_command() {
    local cmd="$1"
    local output
    local exit_code
    
    echo "Running: $cmd" >&2
    
    # Special handling for gofmt (it outputs files that need formatting)
    if [[ "$cmd" == "gofmt -l ." ]]; then
        output=$(eval "$cmd" 2>&1)
        if [ -n "$output" ]; then
            echo "✗ Files need formatting:" >&2
            echo "$output" | while IFS= read -r file; do
                errors+=("$file needs formatting")
            done
            return 1
        else
            echo "✓ All files properly formatted" >&2
            return 0
        fi
    fi
    
    # Run command and capture output
    if output=$(eval "$cmd" 2>&1); then
        echo "✓ Format check passed: $cmd" >&2
        return 0
    else
        exit_code=$?
        echo "✗ Format check failed: $cmd (exit code: $exit_code)" >&2
        # Extract format/lint errors
        echo "$output" | grep -E "(error|Error|warning|Warning)" | head -20 | while IFS= read -r line; do
            errors+=("$line")
        done
        return 1
    fi
}

# Check for common formatting issues in any text file
check_basic_formatting() {
    # Check for trailing whitespace
    local files_with_trailing_ws=$(find . -type f -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.py" -o -name "*.go" -o -name "*.rs" -o -name "*.java" -o -name "*.cpp" -o -name "*.c" -o -name "*.h" 2>/dev/null | grep -v node_modules | xargs grep -l '[[:space:]]$' 2>/dev/null || true)
    
    if [ -n "$files_with_trailing_ws" ]; then
        echo "$files_with_trailing_ws" | while IFS= read -r file; do
            errors+=("$file has trailing whitespace")
        done
    fi
    
    # Check for tabs vs spaces consistency (basic check)
    local files_with_mixed_indent=$(find . -type f -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.py" 2>/dev/null | grep -v node_modules | xargs grep -l $'^\t' | xargs grep -l '^ ' 2>/dev/null || true)
    
    if [ -n "$files_with_mixed_indent" ]; then
        echo "$files_with_mixed_indent" | while IFS= read -r file; do
            errors+=("$file has mixed tabs and spaces")
        done
    fi
}

# Run format checks
if [ ${#format_commands[@]} -eq 0 ]; then
    echo "No code formatter/linter detected. Running basic checks..." >&2
    check_basic_formatting
else
    format_succeeded=false
    for cmd in "${format_commands[@]}"; do
        if run_format_command "$cmd"; then
            format_succeeded=true
        fi
    done
fi

# Function to escape JSON strings
json_escape() {
    printf '%s' "$1" | sed 's/\\/\\\\/g; s/"/\\"/g; s/	/\\t/g; s/
/\\n/g; s//\\r/g'
}

# Output results in JSON format
echo "{"
echo "  \"passed\": $([ ${#errors[@]} -eq 0 ] && echo "true" || echo "false"),"
echo "  \"errors\": ["
if [ ${#errors[@]} -gt 0 ]; then
    for i in "${!errors[@]}"; do
        echo -n "    \"$(json_escape "${errors[$i]}")\"" 
        if [ $i -lt $((${#errors[@]} - 1)) ]; then
            echo ","
        else
            echo
        fi
    done
fi
echo "  ],"
echo "  \"fixInstructions\": \"Fix all formatting issues. Run your code formatter/linter and fix any violations. Remove trailing whitespace and ensure consistent indentation.\""
echo "}"
