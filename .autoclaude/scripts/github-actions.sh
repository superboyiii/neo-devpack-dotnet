#!/bin/bash
# GitHub Actions Check
# Validates GitHub Actions workflows
# Auto-generated by AutoClaude

set -euo pipefail

# Initialize arrays
declare -a errors=()
declare -a warnings=()

# Check if .github/workflows directory exists
if [ ! -d ".github/workflows" ]; then
    echo "{"
    echo "  \"passed\": true,"
    echo "  \"errors\": [],"
    echo "  \"warnings\": [\"No GitHub Actions workflows found\"]"
    echo "}"
    exit 0
fi

# Function to validate YAML syntax
validate_yaml() {
    local file="$1"
    
    # Basic YAML validation
    if ! command -v yq &> /dev/null && ! command -v python &> /dev/null; then
        warnings+=("Cannot validate YAML syntax - no YAML parser available")
        return
    fi
    
    # Try yq first
    if command -v yq &> /dev/null; then
        if ! yq eval '.' "$file" &> /dev/null; then
            errors+=("$file: Invalid YAML syntax")
        fi
    # Fall back to Python
    elif command -v python &> /dev/null; then
        if ! python -c "import yaml; yaml.safe_load(open('$file'))" &> /dev/null 2>&1; then
            errors+=("$file: Invalid YAML syntax")
        fi
    fi
}

# Function to check workflow file
check_workflow() {
    local file="$1"
    local filename=$(basename "$file")
    
    # Validate YAML syntax
    validate_yaml "$file"
    
    # Check for required fields
    if ! grep -q "^name:" "$file"; then
        warnings+=("$filename: Missing 'name' field")
    fi
    
    if ! grep -q "^on:" "$file"; then
        errors+=("$filename: Missing 'on' trigger")
    fi
    
    if ! grep -q "^jobs:" "$file"; then
        errors+=("$filename: Missing 'jobs' section")
    fi
    
    # Check for common issues
    if grep -q "ubuntu-16.04\|ubuntu-18.04" "$file"; then
        warnings+=("$filename: Using deprecated Ubuntu version")
    fi
    
    if grep -q "actions/checkout@v1\|actions/setup-node@v1" "$file"; then
        warnings+=("$filename: Using outdated action versions")
    fi
    
    if grep -q "\${{ secrets\\." "$file" && ! grep -q "\${{ secrets\\." "$file" | grep -q "if:"; then
        # Check if secrets are used without conditions
        warnings+=("$filename: Secrets used - ensure they are properly configured")
    fi
    
    # Check for hardcoded versions
    if grep -qE "node-version: ['\"]*[0-9]+\.[0-9]+\.[0-9]+['\"]*" "$file"; then
        warnings+=("$filename: Hardcoded Node.js version - consider using version ranges")
    fi
}

# Check all workflow files
for workflow in .github/workflows/*.yml .github/workflows/*.yaml; do
    if [ -f "$workflow" ]; then
        check_workflow "$workflow"
    fi
done

# Check for workflow dependencies
if [ -f ".github/dependabot.yml" ] || [ -f ".github/dependabot.yaml" ]; then
    echo "âœ“ Dependabot configuration found" >&2
else
    warnings+=("No Dependabot configuration - consider adding for automated dependency updates")
fi

# Function to escape JSON strings
json_escape() {
    printf '%s' "$1" | sed 's/\\/\\\\/g; s/"/\\"/g; s/	/\\t/g; s/
/\\n/g; s//\\r/g'
}

# Output results in JSON format
echo "{"
echo "  \"passed\": $([ ${#errors[@]} -eq 0 ] && echo "true" || echo "false"),"
echo "  \"errors\": ["
if [ ${#errors[@]} -gt 0 ]; then
    for i in "${!errors[@]}"; do
        echo -n "    \"$(json_escape "${errors[$i]}")\"" 
        if [ $i -lt $((${#errors[@]} - 1)) ]; then
            echo ","
        else
            echo
        fi
    done
fi
echo "  ],"
echo "  \"warnings\": ["
if [ ${#warnings[@]} -gt 0 ]; then
    for i in "${!warnings[@]}"; do
        echo -n "    \"$(json_escape "${warnings[$i]}")\"" 
        if [ $i -lt $((${#warnings[@]} - 1)) ]; then
            echo ","
        else
            echo
        fi
    done
fi
echo "  ],"
echo "  \"fixInstructions\": \"Fix all GitHub Actions syntax errors. Update deprecated runner versions and action versions. Ensure all required fields are present.\""
echo "}"
